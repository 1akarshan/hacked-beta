{"ast":null,"code":"import \"core-js/modules/es.json.stringify.js\";\nimport { IonContent, IonIcon, IonHeader, IonTitle, IonToolbar, IonButtons, IonButton, IonGrid, IonRow, IonCol, modalController } from '@ionic/vue';\nimport { defineComponent } from 'vue';\nimport { cameraOutline, arrowBackOutline } from 'ionicons/icons';\nimport { MediaCapture } from '@awesome-cordova-plugins/media-capture';\nimport { Capacitor } from '@capacitor/core';\nimport axios from 'axios';\nexport default defineComponent({\n  name: 'ModalVue',\n  components: {\n    IonContent,\n    IonHeader,\n    IonTitle,\n    IonToolbar,\n    IonButtons,\n    IonButton,\n    IonIcon,\n    IonGrid,\n    IonRow,\n    IonCol\n  },\n  data() {\n    return {\n      videoInfo: {},\n      optionset1: [{\n        title: 'Option 1'\n      }, {\n        title: 'Option 2'\n      }],\n      optionset2: [{\n        title: 'Option 3'\n      }, {\n        title: 'Option 4'\n      }],\n      icon: {\n        md: cameraOutline,\n        ios: cameraOutline,\n        mdBack: arrowBackOutline,\n        iosBack: arrowBackOutline\n      }\n    };\n  },\n  props: {\n    id: {\n      type: Number,\n      default: null\n    },\n    title: {\n      type: String,\n      default: null\n    },\n    question: {\n      type: String,\n      default: null\n    },\n    difficulty: {\n      type: String,\n      default: null\n    },\n    color: {\n      type: String,\n      default: null\n    }\n  },\n  methods: {\n    cancel() {\n      return modalController.dismiss('cancel', this.videoInfo);\n    },\n    takeVideo: async function () {\n      try {\n        const options = {\n          duration: 10,\n          limit: 1,\n          quality: 1\n        };\n        const result = await MediaCapture.captureVideo(options);\n        this.videoInfo = result[0];\n        // console.log(\"videoInfo\", JSON.stringify(result[0]));\n        const blob = await fetch(Capacitor.convertFileSrc(this.videoInfo.fullPath)).then(r => r.blob());\n        const formData = new FormData();\n        formData.append(\"file\", blob, this.videoInfo.name);\n        // convert video blob to base64\n        let reader = new FileReader();\n        reader.readAsDataURL(blob);\n        reader.onloadend = async function () {\n          let base64data = reader.result;\n          let trimmed = base64data.substring(base64data.indexOf(\",\") + 1);\n          console.log(trimmed); // DEBUG\n          axios({\n            method: \"post\",\n            url: \"https://51d1-2620-101-c040-85c-d08b-6896-278c-74d5.ngrok.io/upload/\",\n            data: JSON.stringify({\n              _data: trimmed\n            }),\n            headers: {\n              \"Content-Type\": \"application/json\"\n            }\n          }).then(response => {\n            alert(response.status);\n          });\n        };\n      } catch (error) {\n        // NEVER PUT ALERT HERE\n        console.log(error);\n      }\n    }\n  }\n});","map":{"version":3,"mappings":"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","names":["IonContent","IonIcon","IonHeader","IonTitle","IonToolbar","IonButtons","IonButton","IonGrid","IonRow","IonCol","modalController","defineComponent","cameraOutline","arrowBackOutline","MediaCapture","Capacitor","axios","name","components","data","videoInfo","optionset1","title","optionset2","icon","md","ios","mdBack","iosBack","props","id","type","Number","default","String","question","difficulty","color","methods","cancel","dismiss","takeVideo","options","duration","limit","quality","result","captureVideo","blob","fetch","convertFileSrc","fullPath","then","r","formData","FormData","append","reader","FileReader","readAsDataURL","onloadend","base64data","trimmed","substring","indexOf","console","log","method","url","JSON","stringify","_data","headers","response","alert","status","error"],"sourceRoot":"","sources":["C:\\Users\\akars\\OneDrive\\Documents\\GitHub\\hacked-beta\\frontend\\ASLlingo\\src\\components\\ModalComponent.vue"],"sourcesContent":["<template>\r\n    <ion-header>\r\n      <ion-toolbar>\r\n        <ion-buttons slot=\"start\">\r\n          <ion-button color=\"medium\" @click=\"cancel\">\r\n            <ion-icon :md=\"icon.mdBack\" :ios=\"icon.iosBack\" ></ion-icon>\r\n        </ion-button>\r\n        </ion-buttons>\r\n        <ion-grid>\r\n            <ion-row >\r\n                <ion-title>{{title}}</ion-title>\r\n            </ion-row>\r\n            <ion-row>\r\n                <ion-label style=\"padding-left:1.2rem\">\r\n\r\n<ion-text :color=\"color\">\r\n<p><strong>{{difficulty}}</strong></p>\r\n</ion-text>\r\n</ion-label>\r\n            </ion-row>\r\n        </ion-grid>\r\n        \r\n        \r\n      </ion-toolbar>\r\n    </ion-header>\r\n    <ion-content class=\"ion-padding\">\r\n        <ion-grid>\r\n            <ion-row>\r\n                <p id=\"questionHeader\">{{question}}</p>\r\n            </ion-row>\r\n            <ion-row>\r\n                <ion-col v-for=\"item in optionset1\" :key=\"item.id\" style=\"\">\r\n                    <ion-card>\r\n                        <img alt=\"Silhouette of mountains\" src=\"https://ionicframework.com/docs/img/demos/card-media.png\" />\r\n                        <ion-card-header>\r\n                            <ion-card-title>{{item.title}}</ion-card-title>\r\n                        </ion-card-header>\r\n                    </ion-card>\r\n                </ion-col>\r\n            </ion-row>\r\n            <ion-row>\r\n                <ion-col v-for=\"item in optionset2\" :key=\"item.id\" style=\"\">\r\n                    <ion-card>\r\n                        <img alt=\"Silhouette of mountains\" src=\"https://ionicframework.com/docs/img/demos/card-media.png\" />\r\n                        <ion-card-header>\r\n                            <ion-card-title>{{item.title}}</ion-card-title>\r\n                        </ion-card-header>\r\n                    </ion-card>\r\n                </ion-col>\r\n            </ion-row>\r\n        </ion-grid>        \r\n        \r\n        <p>{{JSON.stringify(videoInfo)}}</p>\r\n        <div style=\"text-align:center\">\r\n            <ion-button @click=\"takeVideo\" shape=\"circle\" id=\"send\">\r\n            <ion-icon :md=\"icon.md\" :ios=\"icon.ios\"></ion-icon>\r\n        </ion-button>\r\n        </div>\r\n    </ion-content>\r\n  </template>\r\n  \r\n  <script >\r\n    import {\r\n      IonContent,\r\n      IonIcon,\r\n      IonHeader,\r\n      IonTitle,\r\n      IonToolbar,\r\n      IonButtons,\r\n      IonButton,\r\n      IonGrid, IonRow, IonCol,\r\n      modalController,\r\n    } from '@ionic/vue';\r\n    import { defineComponent } from 'vue';\r\n    import { cameraOutline, arrowBackOutline  } from 'ionicons/icons';\r\n    import {MediaCapture} from '@awesome-cordova-plugins/media-capture';\r\n  import {Capacitor} from '@capacitor/core';\r\n  import axios from 'axios';\r\n    export default defineComponent({\r\n      name: 'ModalVue',\r\n      components: { IonContent, IonHeader, IonTitle, IonToolbar, IonButtons, IonButton,IonIcon, IonGrid, IonRow, IonCol },\r\n      data() {\r\n        return {\r\n            videoInfo: {},\r\n            optionset1: [{title: 'Option 1'},{title: 'Option 2'}],\r\n            optionset2: [{title: 'Option 3'},{title: 'Option 4'}],\r\n            icon: {\r\n                md: cameraOutline,\r\n                ios: cameraOutline,\r\n                mdBack: arrowBackOutline,\r\n                iosBack: arrowBackOutline\r\n            }\r\n        }\r\n      },\r\n      props: {\r\n        id: {\r\n          type: Number,\r\n          default: null,\r\n        },\r\n        title: {\r\n          type: String,\r\n          default: null,\r\n        },\r\n        question: {\r\n          type: String,\r\n          default: null,\r\n        },\r\n        difficulty: {\r\n          type: String,\r\n          default: null,\r\n        },\r\n        color: {\r\n          type: String,\r\n          default: null,\r\n        },\r\n      },\r\n      methods: {\r\n        cancel() {\r\n          return modalController.dismiss('cancel', this.videoInfo);\r\n        },\r\n\r\n        takeVideo: async function () {\r\n        \r\n        try {\r\n          const options = {\r\n            duration: 10,\r\n            limit: 1,\r\n            quality: 1\r\n          };\r\n          const result = await MediaCapture.captureVideo(options);\r\n          this.videoInfo = result[0];\r\n          // console.log(\"videoInfo\", JSON.stringify(result[0]));\r\n          const blob = await fetch(\r\n            Capacitor.convertFileSrc(this.videoInfo.fullPath)\r\n          ).then(r => r.blob());\r\n          const formData = new FormData();\r\n          formData.append(\"file\", blob, this.videoInfo.name);\r\n          // convert video blob to base64\r\n          let reader = new FileReader();\r\n          reader.readAsDataURL(blob);\r\n          reader.onloadend = async function() {\r\n            let base64data = reader.result;\r\n            let trimmed = base64data.substring(base64data.indexOf(\",\") + 1);\r\n           console.log(trimmed); // DEBUG\r\n          axios({\r\n            method: \"post\",\r\n            url: \"https://51d1-2620-101-c040-85c-d08b-6896-278c-74d5.ngrok.io/upload/\",\r\n            data: JSON.stringify({\r\n              _data: trimmed\r\n            }),\r\n          headers: {\r\n            \"Content-Type\": \"application/json\"\r\n          }\r\n          }).then((response) => {\r\n            alert(response.status);\r\n          });\r\n          };\r\n        } catch (error) {\r\n            // NEVER PUT ALERT HERE\r\n          console.log(error);\r\n      }\r\n    }\r\n      },\r\n    });\r\n  </script>\r\n\r\n  <style scoped>\r\nion-button#send::part(native) {\r\n  width: 50px;\r\n  height: 50px;\r\n  border-radius: 100% !important;\r\n}\r\np#questionHeader{ \r\n  font-family: 'Ubuntu', sans-serif;\r\n  font-weight: 900;\r\n    font-size: 2rem;\r\n    -webkit-text-stroke: 2px black;\r\ntext-stroke: 2px navy;\r\ncolor: white\r\n  \r\n}\r\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}